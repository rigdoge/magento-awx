---
- name: 安装 PHP-FPM 8.3
  hosts: all
  gather_facts: no
  vars:
    use_namespace: "{{ namespace | default('default') }}"
    use_nodeport: "{{ nodeport | default('30900') }}"
  tasks:
    - name: 创建命名空间
      shell: |
        if [ "{{ use_namespace }}" != "default" ]; then
          echo "=== 创建命名空间 {{ use_namespace }} ==="
          /usr/local/bin/k3s kubectl create namespace {{ use_namespace }} || true
        fi
      register: namespace_result

    - name: 创建 PHP-FPM 配置
      copy:
        dest: /tmp/php-fpm.yaml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: php-fpm
            namespace: {{ use_namespace }}
            labels:
              app: php-fpm
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: php-fpm
            template:
              metadata:
                labels:
                  app: php-fpm
              spec:
                containers:
                - name: php-fpm
                  image: php:8.3-fpm
                  ports:
                  - containerPort: 9000
                    name: fpm
                  lifecycle:
                    postStart:
                      exec:
                        command:
                        - /bin/sh
                        - -c
                        - |
                          # 安装基础依赖
                          apt-get update && apt-get install -y \
                            libfreetype6-dev \
                            libjpeg62-turbo-dev \
                            libpng-dev \
                            libicu-dev \
                            libxml2-dev \
                            libxslt1-dev \
                            libzip-dev \
                            libonig-dev \
                            libsodium-dev \
                            libcurl4-openssl-dev \
                            && rm -rf /var/lib/apt/lists/*

                          # 配置并安装 GD
                          docker-php-ext-configure gd --with-freetype --with-jpeg
                          
                          # 安装 PHP 扩展
                          docker-php-ext-install -j$(nproc) \
                            bcmath \
                            ctype \
                            curl \
                            dom \
                            fileinfo \
                            filter \
                            gd \
                            hash \
                            iconv \
                            intl \
                            mbstring \
                            pdo_mysql \
                            simplexml \
                            soap \
                            sockets \
                            sodium \
                            tokenizer \
                            xml \
                            xmlwriter \
                            xsl \
                            zip
                          
                          # 配置 OPcache
                          docker-php-ext-enable opcache
                          echo "opcache.enable=1" >> /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
                          echo "opcache.enable_cli=1" >> /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
                          echo "opcache.memory_consumption=128" >> /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
                          echo "opcache.interned_strings_buffer=8" >> /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
                          echo "opcache.max_accelerated_files=4000" >> /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
                          echo "opcache.revalidate_freq=60" >> /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
                          echo "opcache.fast_shutdown=1" >> /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
                  readinessProbe:
                    tcpSocket:
                      port: 9000
                    initialDelaySeconds: 180
                    periodSeconds: 10
                    timeoutSeconds: 10
                    failureThreshold: 3
                  livenessProbe:
                    tcpSocket:
                      port: 9000
                    initialDelaySeconds: 240
                    periodSeconds: 20
                    timeoutSeconds: 10
                    failureThreshold: 3
                  resources:
                    requests:
                      memory: "512Mi"
                      cpu: "500m"
                    limits:
                      memory: "1Gi"
                      cpu: "1000m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: php-fpm
            namespace: {{ use_namespace }}
            labels:
              app: php-fpm
          spec:
            type: NodePort
            ports:
            - port: 9000
              targetPort: 9000
              nodePort: {{ use_nodeport }}
              name: fpm
            selector:
              app: php-fpm

    - name: 清理旧的部署
      shell: |
        echo "=== 清理旧的部署 ==="
        /usr/local/bin/k3s kubectl delete -f /tmp/php-fpm.yaml || true
        echo "等待资源清理完成..."
        sleep 5
      register: cleanup_result

    - name: 应用 PHP-FPM 配置
      shell: |
        echo "=== 开始部署 PHP-FPM ==="
        /usr/local/bin/k3s kubectl apply -f /tmp/php-fpm.yaml
      register: apply_result

    - name: 等待 Pod 创建
      shell: |
        for i in $(seq 1 30); do
          echo "检查 Pod 创建进度... $i/30"
          if /usr/local/bin/k3s kubectl get pods -n {{ use_namespace }} -l app=php-fpm 2>/dev/null | grep -q php-fpm; then
            echo "Pod 已创建"
            exit 0
          fi
          sleep 2
        done
        echo "错误: Pod 未能成功创建"
        exit 1
      register: pod_creation_result

    - name: 等待 Pod 就绪
      shell: |
        for i in $(seq 1 60); do
          echo "检查 Pod 状态... $i/60"
          STATUS=$(/usr/local/bin/k3s kubectl get pods -n {{ use_namespace }} -l app=php-fpm -o jsonpath='{.items[0].status.phase}')
          if [ "$STATUS" = "Running" ]; then
            READY=$(/usr/local/bin/k3s kubectl get pods -n {{ use_namespace }} -l app=php-fpm -o jsonpath='{.items[0].status.containerStatuses[0].ready}')
            if [ "$READY" = "true" ]; then
              echo "Pod 已就绪"
              exit 0
            fi
          fi
          echo "当前状态: $STATUS"
          /usr/local/bin/k3s kubectl describe pods -n {{ use_namespace }} -l app=php-fpm
          sleep 2
        done
        echo "错误: Pod 未能在预期时间内就绪"
        exit 1
      register: pod_ready_result

    - name: 显示部署状态
      shell: |
        echo -e "\n=== PHP-FPM 部署状态 ==="
        echo "Pod 状态:"
        /usr/local/bin/k3s kubectl get pods -n {{ use_namespace }} -l app=php-fpm -o wide
        
        echo -e "\nService 状态:"
        /usr/local/bin/k3s kubectl get svc -n {{ use_namespace }} -l app=php-fpm
        
        echo -e "\n=== 访问地址 ==="
        NODE_IP=$(/usr/local/bin/k3s kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}')
        echo "tcp://$NODE_IP:{{ use_nodeport }}"
      register: status_result

    - name: 显示部署结果
      debug:
        msg: 
          - "{{ namespace_result.stdout_lines | default([]) }}"
          - "{{ apply_result.stdout_lines | default([]) }}"
          - "{{ pod_creation_result.stdout_lines | default([]) }}"
          - "{{ pod_ready_result.stdout_lines | default([]) }}"
          - "{{ status_result.stdout_lines | default([]) }}" 