---
- name: 创建 Magento 2 PHP-FPM Pool
  hosts: localhost
  gather_facts: false
  collections:
    - kubernetes.core
  vars:
    site_name: "{{ site_name | default('chen') }}"  # 站点名称，可以被外部变量覆盖
    php_fpm_namespace: "{{ namespace | default('magento-shared') }}"  # PHP-FPM 所在的命名空间，可以被外部变量覆盖
    k8s_auth:
      host: "{{ k8s_host | default('https://10.43.0.1:443') }}"
      api_key: "{{ k8s_api_key }}"
      validate_certs: "{{ k8s_validate_certs | default(false) }}"

  tasks:
    - name: 显示连接信息
      debug:
        msg: 
          - "Host: {{ k8s_auth.host }}"
          - "Namespace: {{ php_fpm_namespace }}"
          - "Site Name: {{ site_name }}"
          - "验证证书: {{ k8s_auth.validate_certs }}"

    - name: 验证 Kubernetes 连接
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        host: "{{ k8s_auth.host }}"
        api_key: "{{ k8s_auth.api_key }}"
        validate_certs: "{{ k8s_auth.validate_certs }}"
      register: namespace_info
      ignore_errors: true

    - name: 显示所有命名空间
      debug:
        msg: 
          - "状态: {{ namespace_info.failed | default(true) }}"
          - "错误: {{ namespace_info.msg | default('无') }}"
          - "错误详情: {{ namespace_info.module_stderr | default('无') }}"
          - "命名空间列表: {{ (namespace_info.resources | default([])) | map(attribute='metadata.name') | list }}"
      when: namespace_info is defined

    - name: 验证目标命名空间是否存在
      set_fact:
        namespace_exists: "{{ php_fpm_namespace in ((namespace_info.resources | default([])) | map(attribute='metadata.name') | list) }}"
      when: not namespace_info.failed | default(true)

    - name: 显示命名空间验证结果
      debug:
        msg: 
          - "命名空间 {{ php_fpm_namespace }} {{ '存在' if (namespace_exists | default(false)) else '不存在' }}"
          - "连接状态: {{ not (namespace_info.failed | default(true)) }}"
      when: namespace_info is defined

    - name: 创建命名空间
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ php_fpm_namespace }}"
            labels:
              name: "{{ php_fpm_namespace }}"
      register: create_namespace_result
      ignore_errors: yes
      when: not (namespace_exists | default(false))

    - name: 显示命名空间创建结果
      debug:
        msg: 
          - "状态: {{ create_namespace_result.failed | default(false) }}"
          - "错误: {{ create_namespace_result.msg | default('无') }}"
          - "错误详情: {{ create_namespace_result.module_stderr | default('无') }}"
      when: create_namespace_result is defined

    - name: 设置任务状态
      set_fact:
        task_failed: "{{ namespace_info.failed | default(true) or (create_namespace_result.failed | default(false) if not (namespace_exists | default(false)) else false) }}"

    - name: 如果 Kubernetes 连接失败则退出
      fail:
        msg: |
          Kubernetes 连接失败，请检查以下信息：
          1. API 服务器地址: {{ k8s_auth.host }}
          2. Token 是否有效: {{ k8s_auth.api_key }}
          3. 命名空间 {{ php_fpm_namespace }} {{ '存在' if (namespace_exists | default(false)) else '不存在' }}
          4. 网络连接是否正常
          5. 证书验证设置: {{ k8s_auth.validate_certs }}
          
          错误信息：{{ namespace_info.msg | default('无') }}
          错误详情：{{ namespace_info.module_stderr | default('无') }}
          可用命名空间：{{ (namespace_info.resources | default([])) | map(attribute='metadata.name') | list | to_nice_json }}
          
          命名空间创建结果：
          状态：{{ create_namespace_result.failed | default(false) if create_namespace_result is defined else '未尝试创建' }}
          错误：{{ create_namespace_result.msg | default('无') if create_namespace_result is defined else '无' }}
      when: task_failed

    - name: 创建 PHP-FPM Pool ConfigMap
      kubernetes.core.k8s:
        host: "{{ k8s_auth.host }}"
        api_key: "{{ k8s_auth.api_key }}"
        validate_certs: "{{ k8s_auth.validate_certs }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: chen-php-fpm-pool
            namespace: "{{ php_fpm_namespace }}"
          data:
            pool.conf: |
              [{{ site_name }}]
              listen = /run/php/php8.3-fpm.sock
              listen.owner = www-data
              listen.group = www-data
              listen.mode = 0660
              pm = dynamic
              pm.max_children = 50
              pm.start_servers = 5
              pm.min_spare_servers = 5
              pm.max_spare_servers = 35
              pm.max_requests = 500
              catch_workers_output = yes
              php_admin_value[memory_limit] = 4G
              php_admin_value[max_execution_time] = 1800
              php_admin_value[max_input_time] = 1800
              php_admin_value[post_max_size] = 64M
              php_admin_value[upload_max_filesize] = 64M
              php_admin_value[error_log] = /proc/self/fd/2
              php_admin_flag[display_errors] = off
              php_admin_flag[display_startup_errors] = off
              access.log = /proc/self/fd/2

    - name: 获取当前 PHP-FPM Deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: php-fpm
        namespace: "{{ php_fpm_namespace }}"
        host: "{{ k8s_auth.host }}"
        api_key: "{{ k8s_auth.api_key }}"
        validate_certs: "{{ k8s_auth.validate_certs }}"
      register: current_deployment

    - name: 显示当前 Deployment 信息
      debug:
        msg: 
          - "状态: {{ current_deployment.failed | default(false) }}"
          - "错误: {{ current_deployment.msg | default('无') }}"
          - "资源: {{ current_deployment.resources | default([]) }}"
      when: current_deployment is defined

    - name: 更新 PHP-FPM Deployment 以挂载新的 Pool 配置
      kubernetes.core.k8s:
        host: "{{ k8s_auth.host }}"
        api_key: "{{ k8s_auth.api_key }}"
        validate_certs: "{{ k8s_auth.validate_certs }}"
        state: present
        merge_type: strategic-merge
        force: true
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: php-fpm
            namespace: "{{ php_fpm_namespace }}"
            labels:
              app: php-fpm
              role: shared
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: php-fpm
                role: shared
            template:
              metadata:
                labels:
                  app: php-fpm
                  role: shared
              spec:
                securityContext:
                  fsGroup: 33
                volumes:
                  - name: pool-config
                    configMap:
                      name: chen-php-fpm-pool
                  - name: run-php
                    emptyDir: {}
                containers:
                  - name: php-fpm
                    image: docker.io/library/php:8.3-fpm
                    resources:
                      requests:
                        cpu: "200m"
                        memory: "256Mi"
                      limits:
                        cpu: "1"
                        memory: "4Gi"
                    securityContext:
                      runAsUser: 33  # www-data 的 UID
                      runAsGroup: 33  # www-data 的 GID
                      allowPrivilegeEscalation: false
                    volumeMounts:
                      - name: pool-config
                        mountPath: /usr/local/etc/php-fpm.d/chen.conf
                        subPath: pool.conf
                      - name: run-php
                        mountPath: /run/php
                    lifecycle:
                      postStart:
                        exec:
                          command:
                            - /bin/sh
                            - -c
                            - |
                              rm -f /usr/local/etc/php-fpm.d/www.conf && \
                              rm -f /usr/local/etc/php-fpm.d/www.conf.default
                    livenessProbe:
                      exec:
                        command:
                          - /bin/sh
                          - -c
                          - test -S /run/php/php8.3-fpm.sock
                      initialDelaySeconds: 10
                      periodSeconds: 10
                    readinessProbe:
                      exec:
                        command:
                          - /bin/sh
                          - -c
                          - test -S /run/php/php8.3-fpm.sock
                      initialDelaySeconds: 10
                      periodSeconds: 10

    - name: 等待 PHP-FPM Pod 重启
      kubernetes.core.k8s_info:
        host: "{{ k8s_auth.host }}"
        api_key: "{{ k8s_auth.api_key }}"
        validate_certs: "{{ k8s_auth.validate_certs }}"
        kind: Pod
        namespace: "{{ php_fpm_namespace }}"
        label_selectors:
          - app=php-fpm
      register: pod_status
      until: pod_status.resources[0].status.phase == "Running"
      retries: 30
      delay: 10

    - name: 显示完成信息
      debug:
        msg: "PHP-FPM Pool {{ site_name }} 配置成功"

    - name: 清理临时文件
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/token
      ignore_errors: yes 