---
- name: 还原 AWX K8s 资源
  hosts: KS-1
  gather_facts: yes
  vars:
    backup_dir: "/backup/awx"
    restore_file: "{{ backup_timestamp | default('') }}"  # 通过 -e backup_timestamp=YYYYMMDDHHMMSS 指定要还原的备份
    temp_dir: "/tmp/awx-restore"
    use_namespace: "awx"
  
  tasks:
    - name: 检查还原时间戳参数
      fail:
        msg: "请通过 -e backup_timestamp=YYYYMMDDHHMMSS 指定要还原的备份时间戳，例如: -e backup_timestamp=20240326143022"
      when: restore_file == ''

    - name: 检查备份文件是否存在
      stat:
        path: "{{ backup_dir }}/{{ restore_file }}.tar.gz"
      register: backup_stat
      become: yes

    - name: 验证备份文件存在
      fail:
        msg: "备份文件 {{ backup_dir }}/{{ restore_file }}.tar.gz 不存在"
      when: not backup_stat.stat.exists

    - name: 创建临时目录
      file:
        path: "{{ temp_dir }}"
        state: directory
        mode: '0755'
      become: yes

    - name: 解压备份文件
      shell: |
        cd {{ temp_dir }} && tar xzf {{ backup_dir }}/{{ restore_file }}.tar.gz
      become: yes

    - name: 获取 deployment 名称
      shell: |
        WEB_DEPLOYMENT=$(grep "kind: Deployment" -A 1 {{ temp_dir }}/{{ restore_file }}/resources.yaml | grep "name:" | head -n 1 | awk '{print $2}')
        TASK_DEPLOYMENT=$(grep "kind: Deployment" -A 1 {{ temp_dir }}/{{ restore_file }}/resources.yaml | grep "name:" | tail -n 1 | awk '{print $2}')
        echo "$WEB_DEPLOYMENT $TASK_DEPLOYMENT"
      register: deployment_names
      become: yes

    - name: 停止 AWX 服务
      shell: |
        WEB_DEPLOYMENT=$(echo "{{ deployment_names.stdout }}" | cut -d' ' -f1)
        TASK_DEPLOYMENT=$(echo "{{ deployment_names.stdout }}" | cut -d' ' -f2)
        k3s kubectl scale deployment -n {{ use_namespace }} $WEB_DEPLOYMENT --replicas=0
        k3s kubectl scale deployment -n {{ use_namespace }} $TASK_DEPLOYMENT --replicas=0
      become: yes

    - name: 等待 AWX Pod 停止
      shell: |
        k3s kubectl wait --for=delete pod -l app=awx-web -n {{ use_namespace }} --timeout=60s
        k3s kubectl wait --for=delete pod -l app=awx-task -n {{ use_namespace }} --timeout=60s
      become: yes
      ignore_errors: yes

    - name: 还原 K8s 资源
      shell: |
        # 按顺序还原资源
        echo "还原 AWX CR..."
        k3s kubectl apply -f {{ temp_dir }}/{{ restore_file }}/awx-cr.yaml
        
        echo "还原 Secrets..."
        k3s kubectl apply -f {{ temp_dir }}/{{ restore_file }}/secrets.yaml
        
        echo "还原 ConfigMaps..."
        k3s kubectl apply -f {{ temp_dir }}/{{ restore_file }}/configmaps.yaml
        
        echo "还原 PVCs..."
        k3s kubectl apply -f {{ temp_dir }}/{{ restore_file }}/pvcs.yaml
        
        echo "还原其他资源..."
        k3s kubectl apply -f {{ temp_dir }}/{{ restore_file }}/resources.yaml
      register: restore_result
      become: yes

    - name: 显示还原结果
      debug:
        var: restore_result.stdout_lines

    - name: 等待资源就绪
      shell: |
        echo "等待 PostgreSQL 就绪..."
        k3s kubectl wait --for=condition=ready pod -l app=postgresql -n {{ use_namespace }} --timeout=300s
        
        echo "等待 Redis 就绪..."
        k3s kubectl wait --for=condition=ready pod -l app=redis -n {{ use_namespace }} --timeout=300s
      become: yes
      ignore_errors: yes

    - name: 启动 AWX 服务
      shell: |
        WEB_DEPLOYMENT=$(echo "{{ deployment_names.stdout }}" | cut -d' ' -f1)
        TASK_DEPLOYMENT=$(echo "{{ deployment_names.stdout }}" | cut -d' ' -f2)
        k3s kubectl scale deployment -n {{ use_namespace }} $WEB_DEPLOYMENT --replicas=1
        k3s kubectl scale deployment -n {{ use_namespace }} $TASK_DEPLOYMENT --replicas=1
      become: yes

    - name: 等待 AWX Pod 就绪
      shell: |
        k3s kubectl wait --for=condition=ready pod -l app=awx-web -n {{ use_namespace }} --timeout=300s
        k3s kubectl wait --for=condition=ready pod -l app=awx-task -n {{ use_namespace }} --timeout=300s
      become: yes

    - name: 清理临时目录
      file:
        path: "{{ temp_dir }}"
        state: absent
      become: yes 