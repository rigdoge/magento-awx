---
- name: 安装 Magento 2.4.7
  hosts: all
  gather_facts: no
  vars:
    namespace: chen
    domain: magento.tschenfeng.com
    magento_version: 2.4.7
    db_host: percona
    db_name: chenmage
    db_user: chen
    db_password: chen.2010
    admin_user: doge
    admin_password: doge.2010
    composer_public_key: 4f44d6581ab1ff92b53b1e6cc8e4e9b5
    composer_private_key: 8da547c46318a11a0f4a1785cb8171ba
    redis_host: redis
    rabbitmq_host: rabbitmq
    rabbitmq_user: chen
    rabbitmq_password: chen2010
    opensearch_host: opensearch
    varnish_host: varnish

  tasks:
    - name: 创建 Magento 配置
      copy:
        dest: /tmp/magento.yaml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: magento
            namespace: {{ namespace }}
            labels:
              app: magento
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: magento
            template:
              metadata:
                labels:
                  app: magento
              spec:
                initContainers:
                - name: init-magento
                  image: composer:2.6
                  command:
                  - sh
                  - -c
                  - |
                    cd /var/www/html
                    composer config -g http-basic.repo.magento.com ${COMPOSER_PUBLIC_KEY} ${COMPOSER_PRIVATE_KEY}
                    composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition={{ magento_version }} .
                    composer require magento/module-jwt-framework-adapter:*
                    find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} +
                    find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} +
                    chown -R www-data:www-data .
                  env:
                  - name: COMPOSER_PUBLIC_KEY
                    value: "{{ composer_public_key }}"
                  - name: COMPOSER_PRIVATE_KEY
                    value: "{{ composer_private_key }}"
                  volumeMounts:
                  - name: magento-data
                    mountPath: /var/www/html
                containers:
                - name: magento
                  image: php:8.3-fpm
                  ports:
                  - containerPort: 9000
                  env:
                  - name: MAGENTO_DB_HOST
                    value: "{{ db_host }}"
                  - name: MAGENTO_DB_NAME
                    value: "{{ db_name }}"
                  - name: MAGENTO_DB_USER
                    value: "{{ db_user }}"
                  - name: MAGENTO_DB_PASSWORD
                    value: "{{ db_password }}"
                  - name: MAGENTO_ADMIN_USER
                    value: "{{ admin_user }}"
                  - name: MAGENTO_ADMIN_PASSWORD
                    value: "{{ admin_password }}"
                  - name: MAGENTO_BASE_URL
                    value: "https://{{ domain }}"
                  - name: MAGENTO_REDIS_HOST
                    value: "{{ redis_host }}"
                  - name: MAGENTO_RABBITMQ_HOST
                    value: "{{ rabbitmq_host }}"
                  - name: MAGENTO_RABBITMQ_USER
                    value: "{{ rabbitmq_user }}"
                  - name: MAGENTO_RABBITMQ_PASSWORD
                    value: "{{ rabbitmq_password }}"
                  - name: MAGENTO_OPENSEARCH_HOST
                    value: "{{ opensearch_host }}"
                  - name: MAGENTO_VARNISH_HOST
                    value: "{{ varnish_host }}"
                  volumeMounts:
                  - name: magento-data
                    mountPath: /var/www/html
                volumes:
                - name: magento-data
                  persistentVolumeClaim:
                    claimName: magento-data
          ---
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: magento-data
            namespace: {{ namespace }}
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: magento
            namespace: {{ namespace }}
          spec:
            ports:
            - port: 9000
              targetPort: 9000
            selector:
              app: magento

    - name: 创建 Magento Ingress
      copy:
        dest: /tmp/magento-ingress.yaml
        content: |
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: magento
            namespace: {{ namespace }}
            annotations:
              kubernetes.io/ingress.class: nginx
              cert-manager.io/cluster-issuer: letsencrypt-prod
          spec:
            tls:
            - hosts:
              - {{ domain }}
              secretName: magento-tls
            rules:
            - host: {{ domain }}
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: magento
                      port:
                        number: 9000

    - name: 部署 Magento
      shell: |
        kubectl apply -f /tmp/magento.yaml
        kubectl apply -f /tmp/magento-ingress.yaml
      register: deploy_result

    - name: 等待 Magento Pod 就绪
      shell: |
        echo "等待 Magento Pod 就绪..."
        kubectl wait --for=condition=ready pod -l app=magento -n {{ namespace }} --timeout=300s
      register: wait_result

    - name: 初始化 Magento
      shell: |
        POD_NAME=$(kubectl get pod -n {{ namespace }} -l app=magento -o jsonpath='{.items[0].metadata.name}')
        kubectl exec -n {{ namespace }} $POD_NAME -- php bin/magento setup:install \
          --base-url=https://{{ domain }} \
          --db-host={{ db_host }} \
          --db-name={{ db_name }} \
          --db-user={{ db_user }} \
          --db-password={{ db_password }} \
          --admin-firstname=Admin \
          --admin-lastname=User \
          --admin-email=admin@example.com \
          --admin-user={{ admin_user }} \
          --admin-password={{ admin_password }} \
          --language=en_US \
          --currency=USD \
          --timezone=Asia/Shanghai \
          --use-rewrites=1 \
          --search-engine=opensearch \
          --opensearch-host={{ opensearch_host }} \
          --opensearch-port=9200 \
          --cache-backend=redis \
          --cache-backend-redis-server={{ redis_host }} \
          --cache-backend-redis-db=0 \
          --page-cache=redis \
          --page-cache-redis-server={{ redis_host }} \
          --page-cache-redis-db=1 \
          --session-save=redis \
          --session-save-redis-host={{ redis_host }} \
          --session-save-redis-db=2 \
          --amqp-host={{ rabbitmq_host }} \
          --amqp-port=5672 \
          --amqp-user={{ rabbitmq_user }} \
          --amqp-password={{ rabbitmq_password }}
      register: install_result

    - name: 配置生产模式
      shell: |
        POD_NAME=$(kubectl get pod -n {{ namespace }} -l app=magento -o jsonpath='{.items[0].metadata.name}')
        kubectl exec -n {{ namespace }} $POD_NAME -- php bin/magento deploy:mode:set production
        kubectl exec -n {{ namespace }} $POD_NAME -- php bin/magento setup:di:compile
        kubectl exec -n {{ namespace }} $POD_NAME -- php bin/magento setup:static-content:deploy -f
        kubectl exec -n {{ namespace }} $POD_NAME -- php bin/magento cache:flush
      register: config_result

    - name: 显示安装结果
      debug:
        msg: 
          - "部署结果: {{ deploy_result.stdout_lines | default([]) }}"
          - "等待结果: {{ wait_result.stdout_lines | default([]) }}"
          - "安装结果: {{ install_result.stdout_lines | default([]) }}"
          - "配置结果: {{ config_result.stdout_lines | default([]) }}" 