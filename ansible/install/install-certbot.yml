---
- name: 安装 Certbot
  hosts: all
  gather_facts: no
  become: yes
  vars:
    namespace: "{{ namespace | default('default') }}"  # 可在 AWX 中覆盖
    domain: "{{ domain_name | default('awx.tschenfeng.com') }}"  # 可在 AWX 中覆盖
    email: "{{ email_address | default('ssl@tschenfeng.com') }}"  # 可在 AWX 中覆盖
  
  tasks:
    - name: 获取 Nginx Pod 名称
      shell: |
        set -x
        echo "=== 获取 Nginx Pod ==="
        
        # 获取 Pod 名称
        POD_NAME=$(kubectl get pods -n {{ namespace }} -l app=nginx -o jsonpath='{.items[0].metadata.name}')
        if [ -z "$POD_NAME" ]; then
          echo "未找到 Nginx Pod"
          exit 1
        fi
        echo $POD_NAME
      register: pod_name
      
    - name: 显示 Pod 信息
      debug:
        msg: "Nginx Pod: {{ pod_name.stdout }}"

    - name: 安装依赖
      shell: |
        set -x
        echo "=== 安装依赖 ==="
        
        # 更新包管理器
        apt-get update
        
        # 安装依赖
        apt-get install -y \
          python3-pip \
          python3-venv \
          snapd
        
        # 确保 snap 正常运行
        systemctl start snapd
        systemctl enable snapd
      register: deps_result
      
    - name: 显示依赖安装结果
      debug:
        msg: "{{ deps_result.stdout_lines }}"

    - name: 安装 Certbot
      shell: |
        set -x
        echo "=== 安装 Certbot ==="
        
        # 删除可能存在的旧版本
        apt-get remove -y certbot
        
        # 安装最新版本
        snap install --classic certbot
        
        # 创建软链接
        ln -sf /snap/bin/certbot /usr/bin/certbot
      register: install_result
      
    - name: 显示安装结果
      debug:
        msg: "{{ install_result.stdout_lines }}"

    - name: 申请证书
      shell: |
        set -x
        echo "=== 申请证书 ==="
        
        # 停止 Nginx
        kubectl -n {{ namespace }} scale deployment nginx --replicas=0
        sleep 5
        
        # 申请证书
        certbot certonly \
          --standalone \
          --non-interactive \
          --agree-tos \
          --email {{ email }} \
          -d {{ domain }}
        
        # 启动 Nginx
        kubectl -n {{ namespace }} scale deployment nginx --replicas=1
      register: cert_result
      
    - name: 显示证书申请结果
      debug:
        msg: "{{ cert_result.stdout_lines }}"

    - name: 配置自动续期
      shell: |
        set -x
        echo "=== 配置自动续期 ==="
        
        # 测试自动续期
        certbot renew --dry-run
        
        # 添加续期前后的钩子
        mkdir -p /etc/letsencrypt/renewal-hooks/pre
        mkdir -p /etc/letsencrypt/renewal-hooks/post
        
        # 创建续期前停止 Nginx 的脚本
        cat > /etc/letsencrypt/renewal-hooks/pre/stop-nginx.sh << 'EOF'
        #!/bin/bash
        kubectl -n {{ namespace }} scale deployment nginx --replicas=0
        EOF
        
        # 创建续期后启动 Nginx 的脚本
        cat > /etc/letsencrypt/renewal-hooks/post/start-nginx.sh << 'EOF'
        #!/bin/bash
        kubectl -n {{ namespace }} scale deployment nginx --replicas=1
        EOF
        
        # 设置执行权限
        chmod +x /etc/letsencrypt/renewal-hooks/pre/stop-nginx.sh
        chmod +x /etc/letsencrypt/renewal-hooks/post/start-nginx.sh
      register: renew_result
      
    - name: 显示自动续期配置结果
      debug:
        msg: "{{ renew_result.stdout_lines }}"

    - name: 复制证书到 Nginx Pod
      shell: |
        set -x
        echo "=== 复制证书到 Nginx Pod ==="
        
        # 获取 Pod 名称
        POD_NAME=$(kubectl get pods -n {{ namespace }} -l app=nginx -o jsonpath='{.items[0].metadata.name}')
        echo "Pod 名称: $POD_NAME"
        
        # 检查证书文件是否存在
        echo "检查证书文件..."
        ls -l /etc/letsencrypt/live/{{ domain }}/
        
        # 创建临时目录
        echo "创建临时目录..."
        TEMP_DIR=$(mktemp -d)
        
        # 复制证书到临时目录
        echo "复制证书到临时目录..."
        cp -L /etc/letsencrypt/live/{{ domain }}/*.pem $TEMP_DIR/
        
        # 打包证书
        echo "打包证书..."
        cd $TEMP_DIR
        tar czf certs.tar.gz *.pem
        
        # 创建 Pod 中的目录
        echo "创建证书目录..."
        kubectl -n {{ namespace }} exec $POD_NAME -- mkdir -p /etc/letsencrypt/live/{{ domain }}
        
        # 复制并解压证书
        echo "复制并解压证书..."
        kubectl -n {{ namespace }} cp $TEMP_DIR/certs.tar.gz {{ namespace }}/$POD_NAME:/tmp/
        kubectl -n {{ namespace }} exec $POD_NAME -- tar xzf /tmp/certs.tar.gz -C /etc/letsencrypt/live/{{ domain }}/
        kubectl -n {{ namespace }} exec $POD_NAME -- rm /tmp/certs.tar.gz
        
        # 清理临时目录
        echo "清理临时文件..."
        rm -rf $TEMP_DIR
        
        # 验证复制结果
        echo "验证证书文件..."
        kubectl -n {{ namespace }} exec $POD_NAME -- ls -l /etc/letsencrypt/live/{{ domain }}/
      register: copy_result
      
    - name: 显示复制结果
      debug:
        msg: "{{ copy_result.stdout_lines }}" 