---
- name: 安装 Varnish 7.5
  hosts: all
  gather_facts: no
  vars:
    use_namespace: "{{ namespace | default('default') }}"
    use_nodeport: "{{ nodeport | default('30180') }}"
    backend_host: "{{ backend | default('nginx') }}"
    backend_port: "{{ backend_port | default('80') }}"
    varnish_memory: "{{ memory | default('1G') }}"
  tasks:
    - name: 创建命名空间
      shell: |
        if [ "{{ use_namespace }}" != "default" ]; then
          echo "=== 创建命名空间 {{ use_namespace }} ==="
          /usr/local/bin/k3s kubectl create namespace {{ use_namespace }} || true
        fi
      register: namespace_result

    - name: 创建 VCL 配置
      copy:
        dest: /tmp/default.vcl
        content: |
          vcl 4.1;
          
          # 默认后端配置
          backend default {
              .host = "{{ backend_host }}";
              .port = "{{ backend_port }}";
              .probe = {
                  .url = "/health_check.php";
                  .timeout = 2s;
                  .interval = 5s;
                  .window = 10;
                  .threshold = 5;
              }
          }
          
          # 接收请求
          sub vcl_recv {
              # 健康检查
              if (req.url ~ "^/health_check\.php$") {
                  return (pass);
              }
          
              # 不缓存 POST 请求
              if (req.method == "POST") {
                  return (pass);
              }
          
              # 不缓存认证请求
              if (req.http.Authorization) {
                  return (pass);
              }
          
              # 标准缓存规则
              if (req.method != "GET" && req.method != "HEAD") {
                  return (pass);
              }
          
              # 去除不必要的 Cookie
              if (req.url ~ "\.(css|js|jpg|jpeg|png|gif|ico|woff|ttf|eot|svg)$") {
                  unset req.http.Cookie;
              }
          
              return (hash);
          }
          
          # 缓存命中处理
          sub vcl_hit {
              if (obj.ttl >= 0s) {
                  return (deliver);
              }
              return (pass);
          }
          
          # 缓存未命中处理
          sub vcl_miss {
              return (fetch);
          }
          
          # 响应处理
          sub vcl_backend_response {
              # 设置缓存时间
              if (bereq.url ~ "\.(css|js)$") {
                  set beresp.ttl = 24h;
              } elsif (bereq.url ~ "\.(jpg|jpeg|png|gif|ico)$") {
                  set beresp.ttl = 48h;
              } else {
                  set beresp.ttl = 1h;
              }
          
              # 去除 Set-Cookie 头
              if (bereq.url ~ "\.(css|js|jpg|jpeg|png|gif|ico|woff|ttf|eot|svg)$") {
                  unset beresp.http.Set-Cookie;
              }
          
              return (deliver);
          }
          
          # 响应发送
          sub vcl_deliver {
              if (obj.hits > 0) {
                  set resp.http.X-Cache = "HIT";
              } else {
                  set resp.http.X-Cache = "MISS";
              }
              set resp.http.X-Cache-Hits = obj.hits;
              return (deliver);
          }

    - name: 创建 Varnish 配置
      copy:
        dest: /tmp/varnish.yaml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: varnish
            namespace: {{ use_namespace }}
            labels:
              app: varnish
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: varnish
            template:
              metadata:
                labels:
                  app: varnish
              spec:
                containers:
                - name: varnish
                  image: varnish:7.5
                  args:
                    - "-F"
                    - "-f"
                    - "/etc/varnish/default.vcl"
                    - "-s"
                    - "malloc,{{ varnish_memory }}"
                    - "-p"
                    - "default_ttl=3600"
                  ports:
                  - containerPort: 80
                  volumeMounts:
                  - name: varnish-config
                    mountPath: /etc/varnish/default.vcl
                    subPath: default.vcl
                  readinessProbe:
                    tcpSocket:
                      port: 80
                    initialDelaySeconds: 5
                    periodSeconds: 10
                  livenessProbe:
                    tcpSocket:
                      port: 80
                    initialDelaySeconds: 15
                    periodSeconds: 20
                volumes:
                - name: varnish-config
                  configMap:
                    name: varnish-config
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: varnish
            namespace: {{ use_namespace }}
            labels:
              app: varnish
          spec:
            type: NodePort
            ports:
            - port: 80
              targetPort: 80
              nodePort: {{ use_nodeport }}
            selector:
              app: varnish
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: varnish-config
            namespace: {{ use_namespace }}
          data:
            default.vcl: |
              {{ lookup('file', '/tmp/default.vcl') | indent(14) }}

    - name: 清理旧的部署
      shell: |
        echo "=== 清理旧的部署 ==="
        /usr/local/bin/k3s kubectl delete -f /tmp/varnish.yaml || true
        echo "等待资源清理完成..."
        sleep 5
      register: cleanup_result

    - name: 应用 Varnish 配置
      shell: |
        echo "=== 开始部署 Varnish ==="
        /usr/local/bin/k3s kubectl apply -f /tmp/varnish.yaml
      register: apply_result

    - name: 等待 Pod 创建
      shell: |
        for i in $(seq 1 30); do
          echo "检查 Pod 创建进度... $i/30"
          if /usr/local/bin/k3s kubectl get pods -n {{ use_namespace }} -l app=varnish 2>/dev/null | grep -q varnish; then
            echo "Pod 已创建"
            exit 0
          fi
          sleep 2
        done
        echo "错误: Pod 未能成功创建"
        exit 1
      register: pod_creation_result

    - name: 等待 Pod 就绪
      shell: |
        for i in $(seq 1 60); do
          echo "检查 Pod 状态... $i/60"
          STATUS=$(/usr/local/bin/k3s kubectl get pods -n {{ use_namespace }} -l app=varnish -o jsonpath='{.items[0].status.phase}')
          if [ "$STATUS" = "Running" ]; then
            READY=$(/usr/local/bin/k3s kubectl get pods -n {{ use_namespace }} -l app=varnish -o jsonpath='{.items[0].status.containerStatuses[0].ready}')
            if [ "$READY" = "true" ]; then
              echo "Pod 已就绪"
              exit 0
            fi
          fi
          echo "当前状态: $STATUS"
          /usr/local/bin/k3s kubectl describe pods -n {{ use_namespace }} -l app=varnish
          sleep 2
        done
        echo "错误: Pod 未能在预期时间内就绪"
        exit 1
      register: pod_ready_result

    - name: 显示部署状态
      shell: |
        echo -e "\n=== Varnish 部署状态 ==="
        echo "Pod 状态:"
        /usr/local/bin/k3s kubectl get pods -n {{ use_namespace }} -l app=varnish -o wide
        
        echo -e "\nService 状态:"
        /usr/local/bin/k3s kubectl get svc -n {{ use_namespace }} -l app=varnish
        
        echo -e "\n=== 访问地址 ==="
        NODE_IP=$(/usr/local/bin/k3s kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}')
        echo "http://$NODE_IP:{{ use_nodeport }}"
      register: status_result

    - name: 显示部署结果
      debug:
        msg: 
          - "{{ namespace_result.stdout_lines | default([]) }}"
          - "{{ cleanup_result.stdout_lines | default([]) }}"
          - "{{ apply_result.stdout_lines | default([]) }}"
          - "{{ pod_creation_result.stdout_lines | default([]) }}"
          - "{{ pod_ready_result.stdout_lines | default([]) }}"
          - "{{ status_result.stdout_lines | default([]) }}" 