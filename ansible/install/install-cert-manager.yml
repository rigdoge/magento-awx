---
- name: 安装和配置 cert-manager
  hosts: all
  gather_facts: yes
  vars:
    domain_name: awx.tschenfeng.com
    email_address: ssl@tschenfeng.com
    cert_manager_version: v1.13.0
    ingress_nginx_namespace: ingress-nginx
    cert_manager_namespace: cert-manager
    cluster_issuer_name: letsencrypt-prod
    staging: false  # 设置为 true 使用 Let's Encrypt 的测试环境

  tasks:
    - name: 检查和配置 K3s kubeconfig
      shell: |
        echo "检查 K3s kubeconfig..."
        if [ -f /etc/rancher/k3s/k3s.yaml ]; then
          echo "找到 K3s kubeconfig"
          mkdir -p ~/.kube
          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          chmod 600 ~/.kube/config
          echo "已复制 kubeconfig 到 ~/.kube/config"
        else
          echo "未找到 K3s kubeconfig"
          exit 1
        fi
        
        echo "测试 kubectl 连接..."
        kubectl cluster-info
      register: kube_check
      become: yes

    - name: 显示 kubeconfig 检查结果
      debug:
        var: kube_check.stdout_lines

    - name: 检查 Helm 是否已安装
      shell: command -v helm || echo "not found"
      register: helm_check
      changed_when: false

    - name: 下载并安装 Helm
      shell: |
        set -e
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        rm -f get_helm.sh
      when: helm_check.stdout == "not found"

    - name: 创建 ingress-nginx 命名空间
      shell: |
        kubectl create namespace {{ ingress_nginx_namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - name: 添加 ingress-nginx Helm 仓库
      shell: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update

    - name: 检查 Prometheus CRDs 是否已安装
      shell: |
        if kubectl get crd servicemonitors.monitoring.coreos.com > /dev/null 2>&1; then
          echo "found"
        else
          echo "not found"
        fi
      register: prometheus_check
      changed_when: false

    - name: 检查端口占用情况
      shell: |
        echo "=== 检查端口占用 ==="
        
        # 已知的 AWX 端口
        AWX_HTTP_PORT=30180
        AWX_HTTPS_PORT=30443
        
        # 查找可用的 HTTP 端口（31080-31099 范围）
        for port in $(seq 31080 31099); do
          if ! kubectl get svc --all-namespaces -o json | grep -q "\"nodePort\": $port"; then
            HTTP_PORT=$port
            break
          fi
        done
        
        # 查找可用的 HTTPS 端口（31443-31462 范围）
        for port in $(seq 31443 31462); do
          if ! kubectl get svc --all-namespaces -o json | grep -q "\"nodePort\": $port"; then
            HTTPS_PORT=$port
            break
          fi
        done
        
        if [ -z "$HTTP_PORT" ] || [ -z "$HTTPS_PORT" ]; then
          echo "未找到可用端口！"
          exit 1
        fi
        
        echo "选择的 HTTP 端口: $HTTP_PORT"
        echo "选择的 HTTPS 端口: $HTTPS_PORT"
        
        # 保存端口信息供后续使用
        echo "http_port=$HTTP_PORT" > /tmp/ingress_ports
        echo "https_port=$HTTPS_PORT" >> /tmp/ingress_ports
      register: port_check

    - name: 显示端口检查结果
      debug:
        msg: "{{ port_check.stdout_lines }}"

    - name: 读取端口配置
      shell: cat /tmp/ingress_ports
      register: ports_file

    - name: 设置端口变量
      set_fact:
        http_port: "{{ ports_file.stdout_lines[0] | regex_replace('http_port=', '') }}"
        https_port: "{{ ports_file.stdout_lines[1] | regex_replace('https_port=', '') }}"

    - name: 安装 Nginx Ingress Controller（带监控）
      shell: |
        helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace {{ ingress_nginx_namespace }} \
          --set controller.service.type=NodePort \
          --set controller.service.nodePorts.http={{ http_port }} \
          --set controller.service.nodePorts.https={{ https_port }} \
          --set controller.metrics.enabled=true \
          --set controller.metrics.serviceMonitor.enabled=true \
          --set controller.metrics.serviceMonitor.additionalLabels.release=prometheus \
          --wait
      when: prometheus_check.stdout == "found"

    - name: 安装 Nginx Ingress Controller（不带监控）
      shell: |
        helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace {{ ingress_nginx_namespace }} \
          --set controller.service.type=NodePort \
          --set controller.service.nodePorts.http={{ http_port }} \
          --set controller.service.nodePorts.https={{ https_port }} \
          --wait
      when: prometheus_check.stdout == "not found"

    - name: 等待 Nginx Ingress Controller 就绪
      shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=controller --namespace {{ ingress_nginx_namespace }} --timeout=300s
      register: wait_result
      until: wait_result.rc == 0
      retries: 30
      delay: 10

    - name: 创建 cert-manager 命名空间
      shell: |
        kubectl create namespace {{ cert_manager_namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - name: 添加 Jetstack Helm 仓库
      shell: |
        helm repo add jetstack https://charts.jetstack.io
        helm repo update

    - name: 安装 cert-manager CRDs
      shell: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/{{ cert_manager_version }}/cert-manager.crds.yaml

    - name: 检查 Prometheus CRDs 是否已安装（用于 cert-manager 监控）
      shell: |
        if kubectl get crd servicemonitors.monitoring.coreos.com > /dev/null 2>&1; then
          echo "found"
        else
          echo "not found"
        fi
      register: prometheus_check_cert_manager
      changed_when: false

    - name: 安装 cert-manager（带监控）
      shell: |
        helm upgrade --install \
          cert-manager jetstack/cert-manager \
          --namespace {{ cert_manager_namespace }} \
          --version {{ cert_manager_version }} \
          --set installCRDs=false \
          --set prometheus.enabled=true \
          --set prometheus.servicemonitor.enabled=true \
          --set prometheus.servicemonitor.labels.release=prometheus \
          --wait
      when: prometheus_check_cert_manager.stdout == "found"

    - name: 安装 cert-manager（不带监控）
      shell: |
        helm upgrade --install \
          cert-manager jetstack/cert-manager \
          --namespace {{ cert_manager_namespace }} \
          --version {{ cert_manager_version }} \
          --set installCRDs=false \
          --wait
      when: prometheus_check_cert_manager.stdout == "not found"

    - name: 等待 cert-manager 就绪
      shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=cert-manager --namespace {{ cert_manager_namespace }} --timeout=300s
      register: wait_result
      until: wait_result.rc == 0
      retries: 30
      delay: 10

    - name: 创建 ClusterIssuer
      copy:
        dest: /tmp/cluster-issuer.yaml
        content: |
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: {{ cluster_issuer_name }}
          spec:
            acme:
              server: {% if staging %}https://acme-staging-v02.api.letsencrypt.org/directory{% else %}https://acme-v02.api.letsencrypt.org/directory{% endif %}
              email: {{ email_address }}
              privateKeySecretRef:
                name: {{ cluster_issuer_name }}
              solvers:
              - http01:
                  ingress:
                    class: nginx

    - name: 应用 ClusterIssuer
      shell: kubectl apply -f /tmp/cluster-issuer.yaml

    - name: 配置 AWX Ingress
      shell: |
        cat << EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: awx-ingress
          namespace: awx
          annotations:
            cert-manager.io/cluster-issuer: {{ cluster_issuer_name }}
            kubernetes.io/ingress.class: nginx
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            nginx.ingress.kubernetes.io/proxy-body-size: "64m"
            nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
            nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        spec:
          tls:
          - hosts:
            - {{ domain_name }}
            secretName: awx-tls
          rules:
          - host: {{ domain_name }}
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: awx-service
                    port:
                      number: 80
        EOF

    - name: 等待证书就绪
      shell: |
        kubectl wait --for=condition=ready certificate awx-tls -n awx --timeout=300s
      register: cert_wait_result
      until: cert_wait_result.rc == 0
      retries: 30
      delay: 10

    - name: 验证证书状态
      shell: |
        echo "=== 证书状态检查 ==="
        echo "检查证书状态..."
        kubectl get certificate awx-tls -n awx -o wide
        
        echo "检查证书请求状态..."
        kubectl get certificaterequest -n awx -o wide
        
        echo "检查 ACME orders..."
        kubectl get order -n awx -o wide
        
        echo "检查 ACME challenges..."
        kubectl get challenge -n awx -o wide
        
        echo "检查证书 Secret..."
        kubectl get secret awx-tls -n awx -o jsonpath='{.metadata.annotations}' | grep cert-manager
      register: cert_status
      
    - name: 显示证书状态
      debug:
        msg: "{{ cert_status.stdout_lines }}"

    - name: 配置证书监控告警
      shell: |
        cat << EOF | kubectl apply -f -
        apiVersion: monitoring.coreos.com/v1
        kind: PrometheusRule
        metadata:
          name: cert-manager-alerts
          namespace: {{ cert_manager_namespace }}
        spec:
          groups:
          - name: cert-manager
            rules:
            - alert: CertificateExpiringSoon
              expr: |
                avg by (exported_namespace, name) (
                  certmanager_certificate_expiration_timestamp_seconds - time()
                ) < (21 * 24 * 3600)
              for: 1h
              labels:
                severity: warning
              annotations:
                summary: Certificate expiring soon
                description: "Certificate {{ "{{" }} $labels.name {{ "}}" }} in namespace {{ "{{" }} $labels.exported_namespace {{ "}}" }} is expiring in less than 21 days"
            - alert: CertificateNotReady
              expr: |
                certmanager_certificate_ready_status{condition="False"} == 1
              for: 10m
              labels:
                severity: critical
              annotations:
                summary: Certificate not ready
                description: "Certificate {{ "{{" }} $labels.name {{ "}}" }} in namespace {{ "{{" }} $labels.exported_namespace {{ "}}" }} is not ready"
        EOF
      when: prometheus_check_cert_manager.stdout == "found" 