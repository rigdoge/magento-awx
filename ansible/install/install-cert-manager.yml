---
- name: 安装和配置 cert-manager
  hosts: all
  gather_facts: yes
  vars:
    domain_name: awx.tschenfeng.com
    email_address: ssl@tschenfeng.com

  tasks:
    - name: 检查和配置 K3s kubeconfig
      shell: |
        echo "检查 K3s kubeconfig..."
        if [ -f /etc/rancher/k3s/k3s.yaml ]; then
          echo "找到 K3s kubeconfig"
          mkdir -p ~/.kube
          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          chmod 600 ~/.kube/config
          echo "已复制 kubeconfig 到 ~/.kube/config"
        else
          echo "未找到 K3s kubeconfig"
          exit 1
        fi
        
        echo "测试 kubectl 连接..."
        kubectl cluster-info
      register: kube_check
      become: yes  # 使用 sudo 权限

    - name: 显示 kubeconfig 检查结果
      debug:
        var: kube_check.stdout_lines

    - name: 下载并安装 Helm
      shell: |
        set -e
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        rm -f get_helm.sh

    - name: 创建 ingress-nginx 命名空间
      shell: |
        kubectl create namespace ingress-nginx --dry-run=client -o yaml | kubectl apply -f -

    - name: 添加 ingress-nginx Helm 仓库
      shell: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update

    - name: 安装 Nginx Ingress Controller
      shell: |
        helm install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx \
          --set controller.service.type=NodePort \
          --set controller.service.nodePorts.http=30080 \
          --set controller.service.nodePorts.https=30443

    - name: 等待 Nginx Ingress Controller 就绪
      shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=controller --namespace ingress-nginx --timeout=300s
      register: wait_result
      until: wait_result.rc == 0
      retries: 30
      delay: 10

    - name: 创建 cert-manager 命名空间
      shell: |
        kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -

    - name: 添加 Jetstack Helm 仓库
      shell: |
        helm repo add jetstack https://charts.jetstack.io
        helm repo update

    - name: 安装 cert-manager CRDs
      shell: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.crds.yaml

    - name: 安装 cert-manager
      shell: |
        helm install \
          cert-manager jetstack/cert-manager \
          --namespace cert-manager \
          --version v1.13.0

    - name: 等待 cert-manager 就绪
      shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=cert-manager --namespace cert-manager --timeout=300s
      register: wait_result
      until: wait_result.rc == 0
      retries: 30
      delay: 10

    - name: 创建 ClusterIssuer
      shell: |
        cat << EOF | kubectl apply -f -
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: letsencrypt-prod
        spec:
          acme:
            server: https://acme-v02.api.letsencrypt.org/directory
            email: {{ email_address }}
            privateKeySecretRef:
              name: letsencrypt-prod
            solvers:
            - http01:
                ingress:
                  class: nginx
        EOF

    - name: 配置 AWX Ingress
      shell: |
        cat << EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: awx-ingress
          namespace: awx
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-prod
            kubernetes.io/ingress.class: nginx
        spec:
          tls:
          - hosts:
            - {{ domain_name }}
            secretName: awx-tls
          rules:
          - host: {{ domain_name }}
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: awx-service
                    port:
                      number: 80
        EOF

    - name: 等待证书就绪
      shell: |
        kubectl wait --for=condition=ready certificate awx-tls -n awx --timeout=300s
      register: cert_wait_result
      until: cert_wait_result.rc == 0
      retries: 30
      delay: 10

    - name: 验证证书状态
      shell: |
        kubectl get certificate awx-tls -n awx -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
      register: cert_status
      failed_when: cert_status.stdout != "True" 