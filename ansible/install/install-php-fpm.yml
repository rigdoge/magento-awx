---
- name: 安装 PHP-FPM 8.3 基础环境
  hosts: all
  gather_facts: no
  vars:
    use_namespace: "{{ namespace }}"
    use_nodeport: "{{ nodeport | default('9000') }}"
    max_retries: "{{ retries | default('3') }}"
    init_delay: "{{ delay | default('30') }}"

  tasks:
    - name: 检查命名空间
      shell: |
        set -x  # 启用调试模式
        set -e  # 遇到错误就退出
        
        if [ "{{ use_namespace }}" != "default" ]; then
          echo "创建命名空间: {{ use_namespace }}"
          kubectl create namespace {{ use_namespace }} || true
        else
          echo "使用默认命名空间"
        fi

    - name: 创建 PHP-FPM 基础配置
      shell: |
        cat > /tmp/php-fpm.yaml << 'EOF'
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: php-fpm
          namespace: {{ use_namespace }}
          labels:
            app: php-fpm
        spec:
          selector:
            matchLabels:
              app: php-fpm
          replicas: 1
          template:
            metadata:
              labels:
                app: php-fpm
            spec:
              securityContext:
                runAsUser: 0
                runAsGroup: 0
                fsGroup: 0
              containers:
              - name: php-fpm
                image: debian:bullseye-slim
                securityContext:
                  privileged: true
                  allowPrivilegeEscalation: true
                command: ["/bin/bash", "-c"]
                args:
                  - |
                    set -x  # 启用调试模式
                    
                    echo "=== 初始化系统 ==="
                    # 等待系统就绪
                    sleep 10
                    
                    echo "=== 更新系统 ==="
                    # 配置 apt
                    echo "deb http://deb.debian.org/debian bullseye main" > /etc/apt/sources.list
                    echo "deb http://security.debian.org/debian-security bullseye-security main" >> /etc/apt/sources.list
                    echo "deb http://deb.debian.org/debian bullseye-updates main" >> /etc/apt/sources.list
                    
                    # 更新系统
                    apt-get clean
                    apt-get update -y
                    
                    echo "=== 安装基础工具 ==="
                    # 安装基础工具
                    apt-get install -y curl gnupg2 ca-certificates lsb-release apt-transport-https procps
                    
                    echo "=== 添加 PHP 仓库 ==="
                    # 添加 PHP 仓库
                    curl -sSL https://packages.sury.org/php/apt.gpg -o /etc/apt/trusted.gpg.d/php.gpg
                    echo "deb https://packages.sury.org/php/ bullseye main" > /etc/apt/sources.list.d/php.list
                    apt-get update -y
                    
                    echo "=== 安装 PHP-FPM ==="
                    # 安装 PHP-FPM
                    apt-get install -y php8.3-fpm
                    
                    echo "=== 配置 PHP-FPM ==="
                    # 创建必要的目录
                    mkdir -p /run/php
                    
                    # 修改 PHP-FPM 配置
                    sed -i 's/^listen = .*/listen = 9000/' /etc/php/8.3/fpm/pool.d/www.conf
                    
                    echo "=== 启动 PHP-FPM ==="
                    # 启动 PHP-FPM
                    php-fpm8.3 -F --nodaemonize --allow-to-run-as-root
                ports:
                - containerPort: 9000
                resources:
                  requests:
                    cpu: "500m"
                    memory: "512Mi"
                  limits:
                    cpu: "1"
                    memory: "1Gi"
                readinessProbe:
                  tcpSocket:
                    port: 9000
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 3
                livenessProbe:
                  tcpSocket:
                    port: 9000
                  initialDelaySeconds: 20
                  periodSeconds: 20
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 3
                volumeMounts:
                - name: shared-data
                  mountPath: /var/www/html
              volumes:
              - name: shared-data
                emptyDir: {}  # 临时存储，后续可以改为持久存储
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: php-fpm
          namespace: {{ use_namespace }}
          labels:
            app: php-fpm
        spec:
          selector:
            app: php-fpm
          ports:
          - name: fpm
            port: 9000
            targetPort: 9000
          type: ClusterIP
        EOF

    - name: 清理旧部署
      shell: |
        kubectl delete -f /tmp/php-fpm.yaml || true
        echo "等待旧资源清理完成..."
        sleep 10

    - name: 应用 PHP-FPM 配置
      shell: |
        kubectl apply -f /tmp/php-fpm.yaml
        echo "等待 Pod 创建..."
        
        for i in $(seq 1 {{ max_retries }}); do
          echo "检查 Pod 创建进度... 第 $i 次"
          if kubectl get pods -n {{ use_namespace }} -l app=php-fpm --no-headers | grep -q .; then
            echo "Pod 已创建"
            break
          fi
          if [ $i -eq {{ max_retries }} ]; then
            echo "Pod 创建超时"
            exit 1
          fi
          sleep {{ init_delay }}
        done
        
        POD_NAME=$(kubectl get pods -n {{ use_namespace }} -l app=php-fpm -o jsonpath='{.items[0].metadata.name}')
        echo "Pod 名称: $POD_NAME"
        
        for i in $(seq 1 {{ max_retries }}); do
          echo "检查 Pod 状态... 第 $i 次"
          STATUS=$(kubectl get pod -n {{ use_namespace }} $POD_NAME -o jsonpath='{.status.phase}')
          if [ "$STATUS" = "Running" ]; then
            echo "Pod 已就绪"
            
            # 验证 PHP-FPM 是否正常运行
            echo "验证 PHP-FPM 状态..."
            if kubectl exec -n {{ use_namespace }} $POD_NAME -- php-fpm -v; then
              echo "PHP-FPM 基础环境检查通过"
              break
            fi
          fi
          if [ $i -eq {{ max_retries }} ]; then
            echo "Pod 启动失败，当前状态: $STATUS"
            kubectl describe pod -n {{ use_namespace }} $POD_NAME
            exit 1
          fi
          echo "当前状态: $STATUS，等待下一次检查..."
          sleep {{ init_delay }}
        done
      register: deploy_result

    - name: 显示部署结果
      debug:
        msg: "{{ deploy_result.stdout_lines }}" 