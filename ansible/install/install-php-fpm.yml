---
- name: 安装 PHP-FPM 8.3
  hosts: all
  gather_facts: no
  vars:
    use_namespace: "{{ namespace | default('default') }}"
    use_nodeport: "{{ nodeport | default('9000') }}"

  tasks:
    - name: 检查命名空间
      shell: |
        if [ "{{ use_namespace }}" != "default" ]; then
          echo "创建命名空间: {{ use_namespace }}"
          kubectl create namespace {{ use_namespace }} || true
        else
          echo "使用默认命名空间"
        fi

    - name: 创建 PHP-FPM 配置
      shell: |
        cat > /tmp/php-fpm.yaml << 'EOF'
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: php-fpm
          namespace: {{ use_namespace }}
        spec:
          selector:
            matchLabels:
              app: php-fpm
          replicas: 1
          template:
            metadata:
              labels:
                app: php-fpm
            spec:
              initContainers:
              - name: init-php
                image: php:8.3-fpm
                command: 
                - /bin/sh
                - -c
                - |
                  set -ex
                  # 安装系统依赖
                  apt-get update
                  apt-get install -y --no-install-recommends \
                    libfreetype6-dev \
                    libjpeg62-turbo-dev \
                    libpng-dev \
                    libzip-dev \
                    libxml2-dev \
                    libxslt1-dev \
                    libicu-dev \
                    libonig-dev \
                    libsodium-dev \
                    libcurl4-openssl-dev \
                    unzip \
                    && rm -rf /var/lib/apt/lists/*

                  # 配置并安装 PHP 扩展
                  docker-php-ext-configure gd --with-freetype --with-jpeg
                  docker-php-ext-install -j$(nproc) \
                    bcmath \
                    ctype \
                    curl \
                    dom \
                    fileinfo \
                    gd \
                    iconv \
                    intl \
                    mbstring \
                    opcache \
                    pdo_mysql \
                    simplexml \
                    soap \
                    sockets \
                    sodium \
                    tokenizer \
                    xml \
                    xmlwriter \
                    xsl \
                    zip

                  # 配置 OPcache
                  echo "opcache.enable=1" >> /usr/local/etc/php/conf.d/opcache.ini
                  echo "opcache.enable_cli=1" >> /usr/local/etc/php/conf.d/opcache.ini
                  echo "opcache.memory_consumption=128" >> /usr/local/etc/php/conf.d/opcache.ini
                  echo "opcache.interned_strings_buffer=8" >> /usr/local/etc/php/conf.d/opcache.ini
                  echo "opcache.max_accelerated_files=4000" >> /usr/local/etc/php/conf.d/opcache.ini
                  echo "opcache.revalidate_freq=60" >> /usr/local/etc/php/conf.d/opcache.ini
                  echo "opcache.fast_shutdown=1" >> /usr/local/etc/php/conf.d/opcache.ini

                  # 配置 PHP-FPM
                  echo "pm = dynamic" >> /usr/local/etc/php-fpm.d/www.conf
                  echo "pm.max_children = 5" >> /usr/local/etc/php-fpm.d/www.conf
                  echo "pm.start_servers = 2" >> /usr/local/etc/php-fpm.d/www.conf
                  echo "pm.min_spare_servers = 1" >> /usr/local/etc/php-fpm.d/www.conf
                  echo "pm.max_spare_servers = 3" >> /usr/local/etc/php-fpm.d/www.conf
                resources:
                  requests:
                    cpu: "500m"
                    memory: "512Mi"
                  limits:
                    cpu: "1"
                    memory: "1Gi"
              containers:
              - name: php-fpm
                image: php:8.3-fpm
                ports:
                - containerPort: 9000
                resources:
                  requests:
                    cpu: "500m"
                    memory: "512Mi"
                  limits:
                    cpu: "1"
                    memory: "1Gi"
                readinessProbe:
                  tcpSocket:
                    port: 9000
                  initialDelaySeconds: 10
                  periodSeconds: 10
                livenessProbe:
                  tcpSocket:
                    port: 9000
                  initialDelaySeconds: 20
                  periodSeconds: 20
                volumeMounts:
                - name: php-config
                  mountPath: /usr/local/etc/php/conf.d
              volumes:
              - name: php-config
                emptyDir: {}
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: php-fpm
          namespace: {{ use_namespace }}
        spec:
          selector:
            app: php-fpm
          ports:
          - name: fpm
            port: 9000
            targetPort: 9000
            nodePort: {{ use_nodeport }}
          type: NodePort
        EOF

    - name: 清理旧部署
      shell: |
        kubectl delete -f /tmp/php-fpm.yaml || true
        echo "等待旧资源清理完成..."
        sleep 5

    - name: 应用 PHP-FPM 配置
      shell: |
        kubectl apply -f /tmp/php-fpm.yaml
        echo "等待 Pod 创建..."
        
        for i in $(seq 1 30); do
          echo "检查 Pod 创建进度... 第 $i 次"
          if kubectl get pods -n {{ use_namespace }} -l app=php-fpm --no-headers | grep -q .; then
            echo "Pod 已创建"
            break
          fi
          sleep 10
        done
        
        POD_NAME=$(kubectl get pods -n {{ use_namespace }} -l app=php-fpm -o jsonpath='{.items[0].metadata.name}')
        echo "Pod 名称: $POD_NAME"
        
        for i in $(seq 1 30); do
          echo "检查 Pod 状态... 第 $i 次"
          STATUS=$(kubectl get pod -n {{ use_namespace }} $POD_NAME -o jsonpath='{.status.phase}')
          if [ "$STATUS" = "Running" ]; then
            echo "Pod 已就绪"
            break
          fi
          echo "当前状态: $STATUS"
          kubectl describe pod -n {{ use_namespace }} $POD_NAME
          sleep 10
        done
      register: deploy_result

    - name: 显示部署结果
      debug:
        msg: "{{ deploy_result.stdout_lines }}" 