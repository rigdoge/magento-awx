---
- name: 配置 AWX 的 Nginx
  hosts: all
  gather_facts: no
  become: yes
  vars:
    namespace: "{{ namespace | default('awx') }}"
    domain: "{{ domain_name | default('awx.tschenfeng.com') }}"
  
  tasks:
    - name: 获取 Nginx Pod 名称
      shell: |
        set -x
        echo "=== 获取 Nginx Pod ==="
        
        # 获取 Pod 名称
        POD_NAME=$(kubectl get pods -n {{ namespace }} -l app=nginx -o jsonpath='{.items[0].metadata.name}')
        if [ -z "$POD_NAME" ]; then
          echo "未找到 Nginx Pod"
          exit 1
        fi
        echo $POD_NAME
      register: pod_name
      
    - name: 显示 Pod 信息
      debug:
        msg: "Nginx Pod: {{ pod_name.stdout }}"

    - name: 创建配置文件
      shell: |
        set -x
        echo "=== 创建配置文件 ==="
        
        # 创建配置目录
        kubectl -n {{ namespace }} exec {{ pod_name.stdout }} -- mkdir -p /etc/nginx/conf.d
        
        # 创建配置文件
        cat > /tmp/awx.conf << 'EOF'
        server {
            listen 80;
            server_name {{ domain }};
            
            # 将 HTTP 重定向到 HTTPS
            location / {
                return 301 https://$server_name$request_uri;
            }
        }

        server {
            listen 443 ssl;
            server_name {{ domain }};

            # SSL 配置
            ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
            ssl_trusted_certificate /etc/letsencrypt/live/{{ domain }}/chain.pem;

            # SSL 优化
            ssl_session_timeout 1d;
            ssl_session_cache shared:SSL:50m;
            ssl_session_tickets off;

            # SSL 协议和加密套件
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;

            # HSTS 配置
            add_header Strict-Transport-Security "max-age=63072000" always;

            # 代理设置
            location / {
                proxy_pass http://awx-demo-service.awx.svc.cluster.local:80;  # 使用完整的 Kubernetes 服务名
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                # WebSocket 支持
                proxy_buffering off;
                proxy_read_timeout 86400;
            }

            # 安全头部
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        }
        EOF
        
        # 复制配置文件到 Pod
        kubectl -n {{ namespace }} cp /tmp/awx.conf {{ pod_name.stdout }}:/etc/nginx/conf.d/awx.conf
        
        # 删除临时文件
        rm -f /tmp/awx.conf
      register: config_result
      
    - name: 显示配置结果
      debug:
        msg: "{{ config_result.stdout_lines }}"

    - name: 重启 Nginx
      shell: |
        set -x
        echo "=== 重启 Nginx ==="
        
        # 测试配置
        kubectl -n {{ namespace }} exec {{ pod_name.stdout }} -- nginx -t
        
        # 重启 Nginx
        kubectl -n {{ namespace }} exec {{ pod_name.stdout }} -- nginx -s reload
      register: restart_result
      
    - name: 显示重启结果
      debug:
        msg: "{{ restart_result.stdout_lines }}" 