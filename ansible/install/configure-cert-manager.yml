---
- name: 配置 cert-manager 证书
  hosts: all
  gather_facts: yes
  vars:
    domain_name: awx.tschenfeng.com
    email_address: ssl@tschenfeng.com
    cluster_issuer_name: letsencrypt-staging
    staging: true   # 使用 Let's Encrypt 测试环境
    cert_manager_namespace: cert-manager

  tasks:
    - name: 清理现有资源
      shell: |
        echo "清理现有证书资源..."
        kubectl delete certificate -n awx awx-tls --ignore-not-found
        kubectl delete secret -n awx awx-tls --ignore-not-found
        kubectl delete clusterissuer letsencrypt-staging --ignore-not-found
        kubectl delete clusterissuer letsencrypt-prod --ignore-not-found
        echo "清理完成"
      ignore_errors: yes

    - name: 检查和配置 K3s kubeconfig
      shell: |
        echo "检查 K3s kubeconfig..."
        if [ -f /etc/rancher/k3s/k3s.yaml ]; then
          echo "找到 K3s kubeconfig"
          mkdir -p ~/.kube
          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          chmod 644 ~/.kube/config
          echo "已复制 kubeconfig 到 ~/.kube/config"
        else
          echo "未找到 K3s kubeconfig"
          exit 1
        fi
        
        echo "测试 kubectl 连接..."
        kubectl cluster-info
      register: kube_check
      become: yes

    - name: 创建 Cloudflare API Token Secret
      shell: |
        # 创建临时文件
        TEMP_FILE=$(mktemp)
        
        # 写入 API Token，确保没有换行符
        echo -n "{{ cloudflare_api_token }}" > "$TEMP_FILE"
        
        # 创建 Secret
        kubectl create secret generic cloudflare-api-token \
          --namespace {{ cert_manager_namespace }} \
          --from-file=api-token="$TEMP_FILE" \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # 清理临时文件
        rm -f "$TEMP_FILE"
      register: secret_result

    - name: 显示 kubeconfig 检查结果
      debug:
        var: kube_check.stdout_lines

    - name: 创建 ClusterIssuer
      copy:
        dest: /tmp/cluster-issuer.yaml
        content: |
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: {{ cluster_issuer_name }}
          spec:
            acme:
              email: {{ email_address }}
              server: "https://acme-staging-v02.api.letsencrypt.org/directory"
              privateKeySecretRef:
                name: {{ cluster_issuer_name }}
              solvers:
                - dns01:
                    cloudflare:
                      email: {{ email_address }}
                      apiTokenSecretRef:
                        name: cloudflare-api-token
                        key: api-token

    - name: 应用 ClusterIssuer
      shell: kubectl apply -f /tmp/cluster-issuer.yaml

    - name: 配置 AWX Ingress
      copy:
        dest: /tmp/awx-ingress.yaml
        content: |
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: awx-ingress
            namespace: awx
            annotations:
              cert-manager.io/cluster-issuer: {{ cluster_issuer_name }}
              kubernetes.io/ingress.class: nginx
              nginx.ingress.kubernetes.io/ssl-redirect: "false"  # 暂时关闭 SSL 重定向
              nginx.ingress.kubernetes.io/proxy-body-size: "64m"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
              nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
          spec:
            tls:
            - hosts:
              - {{ domain_name }}
              secretName: awx-tls
            rules:
            - host: {{ domain_name }}
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: awx-service
                      port:
                        number: 80

    - name: 应用 AWX Ingress
      shell: kubectl apply -f /tmp/awx-ingress.yaml

    - name: 检查初始证书状态
      shell: |
        echo "=== 初始证书状态检查 ==="
        
        echo "检查 Cloudflare API Token Secret..."
        kubectl get secret cloudflare-api-token -n cert-manager -o yaml
        
        echo "检查 cert-manager 日志..."
        kubectl logs -n cert-manager -l app=cert-manager --tail=50
        
        echo "检查 ClusterIssuer 状态..."
        kubectl get clusterissuer {{ cluster_issuer_name }} -o wide
        
        echo "检查 Ingress 配置..."
        kubectl get ingress -n awx -o wide
        
        echo "检查证书申请状态..."
        echo "证书详细信息："
        kubectl get certificate -n awx -o yaml
        
        echo "证书请求详细信息："
        kubectl get certificaterequest -n awx -o yaml
        
        echo "ACME Order 详细信息："
        kubectl get order -n awx -o yaml
        
        echo "ACME Challenge 详细信息："
        kubectl get challenge -n awx -o yaml
        
        echo "Events 信息："
        kubectl get events -n awx --sort-by='.lastTimestamp'
      register: initial_status
      ignore_errors: yes

    - name: 显示初始状态
      debug:
        msg: "{{ initial_status.stdout_lines }}"

    - name: 等待证书就绪
      shell: |
        echo "开始等待证书就绪..."
        
        # 每 10 秒检查一次证书状态
        for i in $(seq 1 30); do
          echo "=== 第 $i 次检查 ==="
          
          echo "检查证书状态："
          kubectl get certificate -n awx awx-tls -o wide
          
          echo "检查最新的证书请求："
          kubectl get certificaterequest -n awx -o wide
          
          echo "检查 ACME Challenge："
          kubectl get challenge -n awx
          
          echo "检查 cert-manager 日志："
          kubectl logs -n cert-manager -l app=cert-manager --tail=20
          
          if kubectl get certificate -n awx awx-tls -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' | grep -q "True"; then
            echo "证书已就绪！"
            exit 0
          fi
          
          echo "证书未就绪，等待 10 秒后重试..."
          sleep 10
        done
        
        echo "证书等待超时！"
        exit 1
      register: cert_wait_result
      ignore_errors: yes

    - name: 显示证书状态
      debug:
        msg: "{{ cert_wait_result.stdout_lines }}"

    - name: 检查是否成功
      fail:
        msg: "证书申请失败，请检查日志了解详细信息"
      when: cert_wait_result.rc != 0

    - name: 显示配置完成信息
      debug:
        msg: |
          证书配置已完成！
          域名: {{ domain_name }}
          ClusterIssuer: {{ cluster_issuer_name }}
          证书名称: awx-tls
          命名空间: awx 

    - name: 清理现有资源
      shell: |
        echo "清理现有证书资源..."
        kubectl delete certificate -n awx awx-tls --ignore-not-found
        kubectl delete secret -n awx awx-tls --ignore-not-found
        kubectl delete clusterissuer letsencrypt-staging --ignore-not-found
        kubectl delete clusterissuer letsencrypt-prod --ignore-not-found
        echo "清理完成"
      ignore_errors: yes 