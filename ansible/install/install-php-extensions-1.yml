---
- name: 安装 PHP-FPM 基础扩展（第一批）
  hosts: all
  gather_facts: no
  vars:
    use_namespace: "{{ namespace | default('default') }}"

  tasks:
    - name: 获取 PHP-FPM Pod 名称
      shell: |
        POD_NAME=$(kubectl get pods -n {{ use_namespace }} -l app=php-fpm -o jsonpath='{.items[0].metadata.name}')
        if [ -z "$POD_NAME" ]; then
          echo "未找到 PHP-FPM Pod"
          exit 1
        fi
        echo $POD_NAME
      register: pod_name

    - name: 安装基础扩展
      shell: |
        set -e
        POD_NAME="{{ pod_name.stdout }}"
        echo "=== 开始安装基础扩展 ==="
        
        # 检查 Pod 状态
        echo "检查 Pod 状态..."
        STATUS=$(kubectl get pod -n {{ use_namespace }} $POD_NAME -o jsonpath='{.status.phase}')
        if [ "$STATUS" != "Running" ]; then
          echo "Pod 未处于运行状态: $STATUS"
          exit 1
        fi

        # 检查 Pod 权限
        echo "检查 Pod 权限..."
        kubectl exec -n {{ use_namespace }} $POD_NAME -- id
        if [ $? -ne 0 ]; then
          echo "无法执行命令，请检查权限"
          exit 1
        fi
        
        # 创建配置目录
        echo "创建配置目录..."
        kubectl exec -n {{ use_namespace }} $POD_NAME -- mkdir -p /usr/local/etc/php/conf.d || true
        
        # 更新包管理器
        echo "更新包管理器..."
        for i in $(seq 1 3); do
          echo "尝试更新包管理器... 第 $i 次"
          if kubectl exec -n {{ use_namespace }} $POD_NAME -- apt-get update; then
            break
          fi
          if [ $i -eq 3 ]; then
            echo "包管理器更新失败"
            exit 1
          fi
          sleep 5
        done
        
        # 安装依赖
        echo "安装依赖..."
        for i in $(seq 1 3); do
          echo "尝试安装依赖... 第 $i 次"
          if kubectl exec -n {{ use_namespace }} $POD_NAME -- apt-get install -y \
            libicu-dev \
            libzip-dev; then
            break
          fi
          if [ $i -eq 3 ]; then
            echo "依赖安装失败"
            exit 1
          fi
          sleep 5
        done
        
        # 安装扩展函数
        install_extension() {
          local ext=$1
          local max_attempts=3
          local attempt=1
          
          echo "安装扩展: $ext"
          while [ $attempt -le $max_attempts ]; do
            echo "尝试安装 $ext... 第 $attempt 次"
            if kubectl exec -n {{ use_namespace }} $POD_NAME -- docker-php-ext-install -j$(nproc) $ext; then
              return 0
            fi
            if [ $attempt -eq $max_attempts ]; then
              echo "扩展 $ext 安装失败"
              return 1
            fi
            attempt=$((attempt + 1))
            sleep 5
          done
        }
        
        # 安装扩展
        echo "安装 PDO MySQL 扩展..."
        install_extension pdo_mysql
        
        echo "安装 OPcache 扩展..."
        install_extension opcache
        
        # 配置 OPcache
        echo "配置 OPcache..."
        kubectl exec -n {{ use_namespace }} $POD_NAME -- /bin/sh -c 'mkdir -p /usr/local/etc/php/conf.d && echo "
        opcache.enable=1
        opcache.memory_consumption=256
        opcache.max_accelerated_files=60000
        opcache.revalidate_freq=2
        opcache.save_comments=1
        " > /usr/local/etc/php/conf.d/opcache.ini'
        
        # 验证扩展安装
        echo "验证扩展安装..."
        kubectl exec -n {{ use_namespace }} $POD_NAME -- php -m
        
        # 重启 PHP-FPM
        echo "重启 PHP-FPM..."
        kubectl exec -n {{ use_namespace }} $POD_NAME -- kill -USR2 1
      register: install_result

    - name: 显示安装结果
      debug:
        msg: "{{ install_result.stdout_lines }}" 